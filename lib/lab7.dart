import 'package:flutter/material.dart';

void main() {
  runApp(DestinyApp());
}

class DestinyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Boss Level Challenge 2 - Destiny',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        scaffoldBackgroundColor: Color(0xFFF0F4FF),
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      debugShowCheckedModeBanner: false,
      home: StoryPage(),
    );
  }
}

class StoryPage extends StatefulWidget {
  @override
  _StoryPageState createState() => _StoryPageState();
}

class _StoryPageState extends State<StoryPage> {
  int currentStep = 0;
  String storyText = "B·∫°n t·ªânh d·∫≠y trong m·ªôt cƒÉn ph√≤ng t·ªëi v√† kh√¥ng bi·∫øt m√¨nh ƒëang ·ªü ƒë√¢u.";

  List<Map<String, Object>> storySteps = [
    {
      'text': "B·∫°n t·ªânh d·∫≠y trong m·ªôt cƒÉn ph√≤ng t·ªëi v√† kh√¥ng bi·∫øt m√¨nh ƒëang ·ªü ƒë√¢u.",
      'choices': [
        {'text': 'Kh√°m ph√° xung quanh', 'nextStep': 1},
        {'text': 'H∆∞·ªõng v·ªÅ c·ª≠a s·ªï', 'nextStep': 2},
      ]
    },
    {
      'text': "B·∫°n t√¨m th·∫•y m·ªôt chi·∫øc h·ªôp b√≠ ·∫©n trong g√≥c ph√≤ng.",
      'choices': [
        {'text': 'M·ªü h·ªôp', 'nextStep': 3},
        {'text': 'B·ªè qua h·ªôp v√† ƒëi ra ngo√†i', 'nextStep': 4},
      ]
    },
    {
      'text': "B·∫°n nh√¨n qua c·ª≠a s·ªï v√† th·∫•y m·ªôt th·∫ø gi·ªõi l·∫° l·∫´m, m·ªôt c√°nh c·ªïng xu·∫•t hi·ªán t·ª´ xa.",
      'choices': [
        {'text': 'ƒêi ra ngo√†i', 'nextStep': 4},
        {'text': 'Ch·ªù ƒë·ª£i v√† nh√¨n th√™m', 'nextStep': 5},
      ]
    },
    {
      'text': "H·ªôp ch·ª©a m·ªôt vi√™n ƒë√° k·ª≥ l·∫°, v√† khi b·∫°n ch·∫°m v√†o, m·ªôt √°nh s√°ng ch√≥i l√≥a b·∫Øn ra.",
      'choices': [
        {'text': 'C·∫ßm vi√™n ƒë√° v√† kh√°m ph√°', 'nextStep': 6},
        {'text': 'B·ªè vi√™n ƒë√° v√† r·ªùi kh·ªèi ph√≤ng', 'nextStep': 7},
      ]
    },
    {
      'text': "B·∫°n quy·∫øt ƒë·ªãnh b·ªè qua h·ªôp v√† r·ªùi kh·ªèi ph√≤ng, nh∆∞ng g·∫∑p m·ªôt c√°nh c·ªïng b√≠ ·∫©n.",
      'choices': [
        {'text': 'V∆∞·ª£t qua c·ªïng', 'nextStep': 8},
        {'text': 'Quay l·∫°i v√† ki·ªÉm tra l·∫°i chi·∫øc h·ªôp', 'nextStep': 3},
      ]
    },
    {
      'text': "B·∫°n ch·ªù ƒë·ª£i l√¢u h∆°n v√† nh·∫≠n ra c√≥ ai ƒë√≥ ƒëang ƒë·∫øn g·∫ßn.",
      'choices': [
        {'text': 'Ch·∫°y tr·ªën', 'nextStep': 9},
        {'text': 'Ch√†o ƒë√≥n ng∆∞·ªùi ƒë√≥', 'nextStep': 10},
      ]
    },
    {
      'text': "B·∫°n c·∫ßm vi√™n ƒë√° v√† ƒë∆∞·ª£c ƒë∆∞a ƒë·∫øn m·ªôt th·∫ø gi·ªõi m·ªõi, n∆°i b·∫°n ph·∫£i ƒë·ªëi ƒë·∫ßu v·ªõi m·ªôt th·ª≠ th√°ch l·ªõn.",
      'choices': [
        {'text': 'Chi·∫øn ƒë·∫•u', 'nextStep': 11},
        {'text': 'Ch·∫°y tr·ªën', 'nextStep': 12},
      ]
    },
    {
      'text': "B·∫°n b·ªè vi√™n ƒë√° v√† r·ªùi kh·ªèi ph√≤ng, nh∆∞ng th·∫•y m√¨nh ƒëang ƒë·ª©ng gi·ªØa m·ªôt m√™ cung.",
      'choices': [
        {'text': 'ƒêi v√†o m√™ cung', 'nextStep': 13},
        {'text': 'Quay l·∫°i v√† th·ª≠ l·∫°i vi√™n ƒë√°', 'nextStep': 6},
      ]
    },
    {
      'text': "C√°nh c·ªïng d·∫´n b·∫°n ƒë·∫øn m·ªôt th·∫ø gi·ªõi k·ª≥ l·∫°, n∆°i b·∫°n b·∫Øt ƒë·∫ßu h√†nh tr√¨nh m·ªõi.",
      'choices': [
        {'text': 'Kh√°m ph√° th·∫ø gi·ªõi m·ªõi', 'nextStep': 14},
        {'text': 'Quay l·∫°i th·∫ø gi·ªõi c≈©', 'nextStep': 7},
      ]
    },
    {
      'text': "B·∫°n ch·∫°y tr·ªën nh∆∞ng b·ªã b·∫Øt l·∫°i v√† k·∫øt th√∫c h√†nh tr√¨nh ·ªü ƒë√¢y.",
      'choices': []
    },
    {
      'text': "B·∫°n ch√†o ƒë√≥n ng∆∞·ªùi ƒë√≥ v√† ph√°t hi·ªán ra r·∫±ng h·ªç l√† m·ªôt ng∆∞·ªùi b·∫°n c≈©, c√πng nhau b·∫Øt ƒë·∫ßu m·ªôt h√†nh tr√¨nh m·ªõi.",
      'choices': [
        {'text': 'C√πng nhau kh√°m ph√°', 'nextStep': 14},
        {'text': 'Tr·ªü v·ªÅ nh√†', 'nextStep': 7},
      ]
    },
    {
      'text': "Cu·ªëi c√πng, b·∫°n chi·∫øn ƒë·∫•u v√† gi√†nh chi·∫øn th·∫Øng, tr·ªü th√†nh anh h√πng c·ªßa th·∫ø gi·ªõi n√†y.",
      'choices': []
    },
    {
      'text': "B·∫°n ch·∫°y tr·ªën v√† cu·ªëi c√πng b·ªã m·∫Øc k·∫πt trong m·ªôt kh√¥ng gian vƒ©nh vi·ªÖn.",
      'choices': []
    },
    {
      'text': "B·∫°n b·∫Øt ƒë·∫ßu kh√°m ph√° v√πng ƒë·∫•t m·ªõi, v·ªõi hy v·ªçng t√¨m ra v·∫≠n m·ªánh c·ªßa ch√≠nh m√¨nh.",
      'choices': []
    },
  ];

  void _nextStep(int nextStep) {
    if (nextStep < 0 || nextStep >= storySteps.length) return;

    setState(() {
      currentStep = nextStep;
      storyText = storySteps[currentStep]['text'] as String;
    });

    Future.delayed(Duration(milliseconds: 100), () {
      if (!mounted) return;

      final choices = storySteps[currentStep]['choices'] as List?;
      if (choices == null || choices.isEmpty) {
        showDialog(
          context: context,
          builder: (ctx) => AlertDialog(
            title: Text('üé¨ K·∫øt th√∫c c√¢u chuy·ªán'),
            content: Text('C·∫£m ∆°n b·∫°n ƒë√£ tham gia cu·ªôc h√†nh tr√¨nh.'),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.of(ctx).pop();
                  setState(() {
                    currentStep = 0;
                    storyText = storySteps[0]['text'] as String;
                  });
                },
                child: Text('üîÅ B·∫Øt ƒë·∫ßu l·∫°i'),
              )
            ],
          ),
        );
      }
    });
  }



  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Boss Level Challenge 2 - Destiny'),
        backgroundColor: Colors.blueAccent,
      ),
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Container(
                padding: EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Colors.blueAccent,
                  borderRadius: BorderRadius.circular(16),
                  boxShadow: [
                    BoxShadow(color: Colors.black26, blurRadius: 8),
                  ],
                ),
                child: Text(
                  storyText,
                  style: TextStyle(fontSize: 20,
                      color: Colors.white,
                      fontWeight: FontWeight.w600),
                  textAlign: TextAlign.center,
                ),
              ),
              SizedBox(height: 30),
              ..._choices(),
            ],
          ),
        ),
      ),
    );
  }

  List<Widget> _choices() {
    var rawChoices = storySteps[currentStep]['choices'];
    if (rawChoices == null || (rawChoices as List).isEmpty) {
      return [];
    }

    List<Map<String, Object>> choices = List<Map<String, Object>>.from(
        rawChoices);

    return choices.map((choice) {
      return Padding(
        padding: const EdgeInsets.symmetric(vertical: 8.0),
        child: ElevatedButton(
          onPressed: () => _nextStep(choice['nextStep'] as int),
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.white,
            foregroundColor: Colors.blueAccent,
            padding: EdgeInsets.symmetric(vertical: 16, horizontal: 20),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(14),
            ),
            elevation: 3,
          ),
          child: Text(
            choice['text'] as String,
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
        ),
      );
    }).toList();
  }
}